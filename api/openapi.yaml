openapi: 3.0.0
info:
  title: Finsolvz Backend API
  description: |
    Comprehensive financial solutions management system with JWT authentication, 
    user management, company management, report type management, and complete report management.
    
    **Authentication Required**: Most endpoints require a valid JWT token in the Authorization header.
    
    **Roles & Authorization**:
    - `SUPER_ADMIN`: Full system access including user registration, role management, and company/user operations
    - `ADMIN`: User management access (get users list)  
    - `CLIENT`: Basic authenticated access to reports and own profile
    
    **Authorization Pattern**: Authorization checks are performed at the controller level, not middleware level.
    Most report endpoints require authentication only, while user management requires specific roles.
    
    **Base URL**: `http://localhost:8787` (development)
  version: 2.0.0
  contact:
    name: Finsolvz Team
    email: support@finsolvz.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8787
    description: Local Development Server
  - url: https://finsolvz-backend.example.com
    description: Production Environment

tags:
  - name: General
    description: General endpoints (health check, server info)
  - name: Authentication
    description: User authentication and password management
  - name: User Management
    description: User CRUD operations and role management
  - name: Company Management
    description: Company CRUD operations and user associations
  - name: Report Types
    description: Financial report type management
  - name: Reports
    description: Complete report management with filtering and population

paths:
  /:
    get:
      summary: Health check and server greeting
      operationId: healthCheck
      tags:
        - General
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "✨ Finsolvz Backend API ✨"
                  status:
                    type: string
                    example: "healthy"

  /api/login:
    post:
      summary: User login
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/forgot-password:
    post:
      summary: Request password reset
      operationId: forgotPassword
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "New password has been sent to your email"
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/reset-password:
    post:
      summary: Reset password with token
      operationId: resetPassword
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password successfully reset"
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/register:
    post:
      summary: Register new user (SUPER_ADMIN only)
      operationId: register
      tags:
        - User Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
                  newUser:
                    $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /api/users:
    get:
      summary: Get all users (ADMIN+ only)
      operationId: getUsers
      tags:
        - User Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - User Management
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update user (SUPER_ADMIN only)
      operationId: updateUser
      tags:
        - User Management
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated"
                  updatedUser:
                    $ref: '#/components/schemas/UserResponse'

    delete:
      summary: Delete user (SUPER_ADMIN only)
      operationId: deleteUser
      tags:
        - User Management
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/loginUser:
    get:
      summary: Get current authenticated user
      operationId: getLoginUser
      tags:
        - User Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/updateRole:
    put:
      summary: Update user role (SUPER_ADMIN only)
      operationId: updateRole
      tags:
        - User Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/change-password:
    patch:
      summary: Change current user password
      operationId: changePassword
      tags:
        - User Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password successfully changed"

  /api/company:
    get:
      summary: Get all companies
      operationId: getCompanies
      tags:
        - Company Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyResponse'

    post:
      summary: Create new company
      operationId: createCompany
      tags:
        - Company Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyRequest'
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Company created successfully"
                  company:
                    $ref: '#/components/schemas/CompanyResponse'
        '409':
          $ref: '#/components/responses/ConflictError'

  /api/company/{id}:
    get:
      summary: Get company by ID
      operationId: getCompanyById
      tags:
        - Company Management
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update company (SUPER_ADMIN only)
      operationId: updateCompany
      tags:
        - Company Management
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyRequest'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success"
                  company:
                    $ref: '#/components/schemas/CompanyResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Delete company (SUPER_ADMIN only)
      operationId: deleteCompany
      tags:
        - Company Management
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: Company deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Company deleted successfully"
                  company:
                    $ref: '#/components/schemas/CompanyResponse'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/company/{name}:
    get:
      summary: Get company by name
      operationId: getCompanyByName
      tags:
        - Company Management
      security:
        - BearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: "Acme Corporation"
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/user/companies:
    get:
      summary: Get current user's companies
      operationId: getUserCompanies
      tags:
        - Company Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of user's companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyResponse'

  /api/reportTypes:
    get:
      summary: Get all report types
      operationId: getReportTypes
      tags:
        - Report Types
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of report types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTypeResponse'

    post:
      summary: Create new report type
      operationId: createReportType
      tags:
        - Report Types
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportTypeRequest'
      responses:
        '201':
          description: Report type created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report type added successfully"
                  reportType:
                    $ref: '#/components/schemas/ReportTypeResponse'
        '409':
          $ref: '#/components/responses/ConflictError'

  /api/reportTypes/{idOrName}:
    get:
      summary: Get report type by ID or name
      operationId: getReportTypeByIdOrName
      tags:
        - Report Types
      security:
        - BearerAuth: []
      parameters:
        - name: idOrName
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
          description: Report type ID (24 hex chars) or name
      responses:
        '200':
          description: Report type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTypeResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/reportTypes/{id}:
    put:
      summary: Update report type
      operationId: updateReportType
      tags:
        - Report Types
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportTypeRequest'
      responses:
        '200':
          description: Report type updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report Type updated successfully"
                  reportType:
                    $ref: '#/components/schemas/ReportTypeResponse'

    delete:
      summary: Delete report type
      operationId: deleteReportType
      tags:
        - Report Types
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '204':
          description: Report type deleted successfully

  # ===== REPORT MANAGEMENT ENDPOINTS =====
  /api/reports:
    get:
      summary: Get all reports with full population
      operationId: getAllReports
      tags:
        - Reports
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all reports with populated data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create new report
      operationId: createReport
      tags:
        - Reports
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        '201':
          description: Report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/reports/{id}:
    get:
      summary: Get report by ID with full population
      operationId: getReportById
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: Report details with populated data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update existing report
      operationId: updateReport
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportRequest'
      responses:
        '200':
          description: Report updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete report
      operationId: deleteReport
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: Report deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report deleted successfully"
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/reports/name/{name}:
    get:
      summary: Get report by name
      operationId: getReportByName
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: "Q4 Financial Report"
      responses:
        '200':
          description: Report details with populated data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/reports/company/{companyId}:
    get:
      summary: Get reports by company ID
      operationId: getReportsByCompany
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: List of reports for the company
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/reports/companies:
    post:
      summary: Get reports by multiple company IDs
      operationId: getReportsByCompanies
      tags:
        - Reports
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetReportsByCompaniesRequest'
      responses:
        '200':
          description: List of reports for the specified companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        '400':
          description: Invalid request - need 2 or more companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "INSUFFICIENT_COMPANIES"
                message: "Need 2 or more companies"

  /api/reports/reportType/{reportType}:
    get:
      summary: Get reports by report type ID
      operationId: getReportsByReportType
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: reportType
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
      responses:
        '200':
          description: List of reports for the report type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/reports/userAccess/{id}:
    get:
      summary: Get reports accessible by user ID
      operationId: getReportsByUserAccess
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
          description: User ID to find reports they have access to
      responses:
        '200':
          description: List of reports accessible by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/reports/createdBy/{id}:
    get:
      summary: Get reports created by user ID
      operationId: getReportsByCreatedBy
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "60f1b2e5e4b0c7a1d8b9c0d1"
          description: User ID to find reports they created
      responses:
        '200':
          description: List of reports created by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@finsolvz.com"
        password:
          type: string
          format: password
          example: "admin123"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: "reset-token-string"
        newPassword:
          type: string
          format: password
          minLength: 6
          example: "newPassword123!"

    # User Management Schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "securePassword123!"
        role:
          type: string
          enum: [SUPER_ADMIN, ADMIN, CLIENT]
          example: "CLIENT"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "John Updated"
        email:
          type: string
          format: email
          example: "john.updated@example.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "newPassword123!"
        role:
          type: string
          enum: [SUPER_ADMIN, ADMIN, CLIENT]
          example: "ADMIN"

    UpdateRoleRequest:
      type: object
      required:
        - userId
        - newRole
      properties:
        userId:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        newRole:
          type: string
          enum: [SUPER_ADMIN, ADMIN, CLIENT]
          example: "ADMIN"

    ChangePasswordRequest:
      type: object
      required:
        - newPassword
        - confirmPassword
      properties:
        newPassword:
          type: string
          format: password
          minLength: 6
          example: "newPassword123!"
        confirmPassword:
          type: string
          format: password
          minLength: 6
          example: "newPassword123!"

    UserResponse:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [SUPER_ADMIN, ADMIN, CLIENT]
          example: "CLIENT"
        company:
          type: array
          items:
            type: string
          example: ["60f1b2e5e4b0c7a1d8b9c0d2"]
        createdAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"

    # Company Management Schemas
    CreateCompanyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "Acme Corporation"
        profilePicture:
          type: string
          format: uri
          example: "https://example.com/logo.png"
        user:
          type: array
          items:
            type: string
          example: ["60f1b2e5e4b0c7a1d8b9c0d1", "60f1b2e5e4b0c7a1d8b9c0d2"]

    UpdateCompanyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "Acme Corporation Updated"
        profilePicture:
          type: string
          format: uri
          example: "https://example.com/new-logo.png"
        user:
          type: array
          items:
            type: string
          example: ["60f1b2e5e4b0c7a1d8b9c0d1"]

    CompanyResponse:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        name:
          type: string
          example: "Acme Corporation"
        profilePicture:
          type: string
          format: uri
          example: "https://example.com/logo.png"
        user:
          type: array
          items:
            $ref: '#/components/schemas/CompanyUserInfo'
        createdAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"

    CompanyUserInfo:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        name:
          type: string
          example: "John Doe"

    # Report Type Schemas
    CreateReportTypeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Monthly Financial Report"

    UpdateReportTypeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Updated Report Type"

    ReportTypeResponse:
      type: object
      properties:
        id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        name:
          type: string
          example: "Monthly Financial Report"

    # Report Management Schemas
    CreateReportRequest:
      type: object
      required:
        - reportName
        - reportType
        - year
        - company
        - createBy
      properties:
        reportName:
          type: string
          minLength: 1
          maxLength: 200
          example: "Q4 2024 Financial Report"
          description: "Name of the report"
        reportType:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
          description: "Report type ObjectID reference"
        year:
          type: string
          example: "2024"
          description: "Year as string (legacy compatibility)"
        company:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d2"
          description: "Company ObjectID reference"
        currency:
          type: string
          example: "USD"
          description: "Currency code (optional)"
        createBy:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d3"
          description: "User ObjectID who creates the report (note: createBy in request, createdBy in response)"
        userAccess:
          type: array
          items:
            type: string
          example: ["60f1b2e5e4b0c7a1d8b9c0d4", "60f1b2e5e4b0c7a1d8b9c0d5"]
          description: "Array of user ObjectIDs who have access to this report"
        reportData:
          oneOf:
            - type: array
              items: {}
            - type: object
          example: [{"title": "Revenue", "value": 1000000}, {"title": "Expenses", "value": 750000}]
          description: "Report data structure (array or object)"

    UpdateReportRequest:
      type: object
      properties:
        reportName:
          type: string
          minLength: 1
          maxLength: 200
          example: "Updated Q4 2024 Financial Report"
        reportType:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
          description: "Report type ObjectID reference"
        year:
          type: string
          example: "2024"
          description: "Year as string"
        company:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d2"
          description: "Company ObjectID reference"
        currency:
          type: string
          example: "EUR"
        userAccess:
          type: array
          items:
            type: string
          example: ["60f1b2e5e4b0c7a1d8b9c0d4"]
          description: "Updated array of user ObjectIDs with access"
        reportData:
          oneOf:
            - type: array
              items: {}
            - type: object
          example: [{"title": "Updated Revenue", "value": 1200000}]
          description: "Updated report data structure"

    GetReportsByCompaniesRequest:
      type: object
      required:
        - companyIds
      properties:
        companyIds:
          type: array
          items:
            type: string
          minItems: 2
          example: ["60f1b2e5e4b0c7a1d8b9c0d1", "60f1b2e5e4b0c7a1d8b9c0d2"]
          description: "Array of company ObjectIDs (minimum 2 required)"

    ReportResponse:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        reportName:
          type: string
          example: "Q4 2024 Financial Report"
        reportType:
          $ref: '#/components/schemas/ReportTypeInfo'
        year:
          type: string
          example: "2024"
          description: "Always returned as string for consistency"
        company:
          $ref: '#/components/schemas/ReportCompanyInfo'
        currency:
          type: string
          example: "USD"
        createdBy:
          $ref: '#/components/schemas/ReportUserInfo'
          description: "User who created the report (populated)"
        userAccess:
          type: array
          items:
            $ref: '#/components/schemas/ReportUserInfo'
          description: "Array of users with access to this report (populated)"
        reportData:
          oneOf:
            - type: array
              items: {}
            - type: object
          example: [{"title": "Revenue", "value": 1000000, "isTotal": false}]
          description: "Report data structure (defaults to empty array if null)"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"

    ReportTypeInfo:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d1"
        name:
          type: string
          example: "Monthly Financial Report"

    ReportCompanyInfo:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d2"
        name:
          type: string
          example: "Acme Corporation"
        profilePicture:
          type: string
          format: uri
          example: "https://example.com/logo.png"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"

    ReportUserInfo:
      type: object
      properties:
        _id:
          type: string
          example: "60f1b2e5e4b0c7a1d8b9c0d3"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [SUPER_ADMIN, ADMIN, CLIENT]
          example: "CLIENT"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-15T10:30:00Z"

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Application-specific error code
          example: "INVALID_INPUT"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid request payload"
        details:
          type: string
          description: Additional error details
          example: "Validation failed: email is required"

  responses:
    BadRequestError:
      description: Invalid request payload or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "BAD_REQUEST"
            message: "Invalid request payload or parameters"
            details: "Validation failed: email is required"

    UnauthorizedError:
      description: Authentication required or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication required"
            details: "Invalid or missing JWT token"

    ForbiddenError:
      description: Access denied due to insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "FORBIDDEN"
            message: "Access denied"
            details: "Insufficient permissions for this operation"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"
            details: "The requested resource could not be found"

    ConflictError:
      description: Resource conflict or already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "CONFLICT"
            message: "Resource conflict"
            details: "Email already registered"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "INTERNAL_SERVER_ERROR"
            message: "An unexpected internal server error occurred"
            details: "Please try again later"