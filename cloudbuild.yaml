# Fixed CI/CD Pipeline for Finsolvz Backend - Logging Issue Resolved
# Uses Cloud Logging instead of custom bucket

steps:
  # Step 1: Run Unit Tests
  - name: 'gcr.io/cloud-builders/go'
    id: 'run-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üß™ Running tests..."
        go mod download
        go test -v ./... || exit 1
        echo "‚úÖ All tests passed"
    env:
      - 'CGO_ENABLED=0'
      - 'GOOS=linux'

  # Step 2: Build Go Binary
  - name: 'gcr.io/cloud-builders/go'
    id: 'build-binary'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üèóÔ∏è Building Go binary..."
        go mod download
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/server
        echo "‚úÖ Binary built successfully"
        ls -la main
        file main
    env:
      - 'CGO_ENABLED=0'
      - 'GOOS=linux'

  # Step 3: Build Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-docker-image'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üê≥ Building Docker image..."
        docker build -t gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA \
                     -t gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest .
        echo "‚úÖ Docker image built"

  # Step 4: Push Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-docker-image'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üì§ Pushing Docker image..."
        docker push gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA
        docker push gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest
        echo "‚úÖ Docker image pushed"

  # Step 5: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-to-cloud-run'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üöÄ Deploying to Cloud Run..."
        gcloud run deploy ${_SERVICE_NAME} \
          --image gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA \
          --region ${_REGION} \
          --platform managed \
          --allow-unauthenticated \
          --memory ${_MEMORY} \
          --cpu ${_CPU} \
          --timeout 900 \
          --max-instances ${_MAX_INSTANCES} \
          --min-instances ${_MIN_INSTANCES} \
          --concurrency 80 \
          --port 8787 \
          --set-env-vars="APP_ENV=production,GREETING=‚ú® Finsolvz Production API ‚ú®,PORT=8787" \
          --set-secrets="MONGO_URI=MONGO_URI:latest,JWT_SECRET=JWT_SECRET:latest" \
          --quiet

        echo "‚úÖ Deployment completed"

  # Step 6: Get Service URL
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-service-url'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üåê Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --format "value(status.url)")
        echo "Service URL: $SERVICE_URL"
        echo "$SERVICE_URL" > service_url.txt

  # Step 7: Health Check
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üè• Running health check..."
        SERVICE_URL=$(cat service_url.txt)
        
        # Wait for service to be ready (max 5 minutes)
        for i in {1..30}; do
          if curl -f --max-time 10 "$SERVICE_URL/" > /dev/null 2>&1; then
            echo "‚úÖ Health check passed"
            exit 0
          fi
          echo "‚è≥ Waiting for service to be ready... ($i/30)"
          sleep 10
        done
        
        echo "‚ùå Health check failed after 5 minutes"
        exit 1

  # Step 8: API Tests
  - name: 'gcr.io/cloud-builders/curl'
    id: 'api-test'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üß™ Testing API endpoints..."
        SERVICE_URL=$(cat service_url.txt)
        
        # Test health endpoint
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s "$SERVICE_URL/")
        if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
          echo "‚úÖ Health endpoint working"
        else
          echo "‚ùå Health endpoint failed"
          echo "Response: $HEALTH_RESPONSE"
        fi
        
        echo "‚úÖ API tests completed"

  # Step 9: Deployment Summary
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deployment-summary'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üìã DEPLOYMENT SUMMARY"
        echo "===================="
        SERVICE_URL=$(cat service_url.txt)
        
        echo "üöÄ Service: ${_SERVICE_NAME}"
        echo "üåê URL: $SERVICE_URL"
        echo "üè∑Ô∏è Image: gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA"
        echo "üìÖ Deployed: $(date)"
        echo "üîó Commit: $COMMIT_SHA"
        echo ""
        echo "üéâ Deployment completed successfully!"

# Images to push to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'

# Build timeout (20 minutes)
timeout: '1200s'

# ‚úÖ FIXED: Use Cloud Logging instead of custom bucket
logging: CLOUD_LOGGING_ONLY

# Build options without service account issues
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 20
  substitutionOption: 'ALLOW_LOOSE'

# Build substitutions
substitutions:
  _SERVICE_NAME: 'finsolvz-backend'
  _REGION: 'asia-southeast2'
  _MEMORY: '1Gi'
  _CPU: '1'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'