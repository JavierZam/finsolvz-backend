name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: finsolvz-backend
  REGION: asia-southeast2

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Check code formatting
      run: |
        unformatted=$(gofmt -l .)
        if [ -n "$unformatted" ]; then
          echo "‚ùå Code not formatted. Files:"
          echo "$unformatted"
          exit 1
        fi
        echo "‚úÖ Code formatting OK"

    - name: Run linting
      run: |
        echo "üîç Running Go vet..."
        go vet ./...
        echo "‚úÖ Go vet passed"

    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        go test -v -timeout=120s -coverprofile=coverage.out ./internal/app/...
        echo "üìä Coverage report:"
        go tool cover -func=coverage.out | tail -5
      env:
        JWT_SECRET: test-jwt-secret-for-github-actions
        CGO_ENABLED: 0

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate secrets
      run: |
        if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
          echo "‚ùå GCP_PROJECT_ID secret is not set"
          echo "Please set it in GitHub repository settings > Secrets and variables > Actions"
          exit 1
        fi
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "‚ùå GCP_SA_KEY secret is not set"
          echo "Please set it in GitHub repository settings > Secrets and variables > Actions"
          exit 1
        fi
        echo "‚úÖ Required secrets are set"
        echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Verify authentication
      run: |
        echo "Verifying GCP authentication..."
        gcloud auth list
        gcloud config get-value project
        
    - name: Configure Docker for Artifact Registry
      run: |
        echo "Configuring Docker authentication for Artifact Registry..."
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        
        echo "Testing Docker authentication..."
        echo "Y" | docker-credential-gcloud get || echo "Credential helper test completed"
        
    - name: Verify Artifact Registry repository
      run: |
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        REGION="${{ env.REGION }}"
        
        echo "Checking if Artifact Registry repository exists..."
        if ! gcloud artifacts repositories describe finsolvz --location=$REGION --project=$PROJECT_ID; then
          echo "Creating Artifact Registry repository..."
          gcloud artifacts repositories create finsolvz \
            --repository-format=docker \
            --location=$REGION \
            --description="Docker repository for Finsolvz Backend" \
            --project=$PROJECT_ID
          echo "Repository created successfully"
        else
          echo "Repository already exists"
        fi

    - name: Build Docker image
      run: |
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        REGION="${{ env.REGION }}"
        IMAGE_TAG="${{ github.sha }}"
        
        echo "Building Docker image..."
        echo "Project ID: $PROJECT_ID"
        echo "Region: $REGION"
        echo "Image tag: $IMAGE_TAG"
        
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend:$IMAGE_TAG .
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend:latest .

    - name: Push Docker image
      run: |
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        REGION="${{ env.REGION }}"
        IMAGE_TAG="${{ github.sha }}"
        
        echo "Pushing Docker images..."
        echo "Registry: $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend"
        
        # Push with error handling
        if ! docker push $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend:$IMAGE_TAG; then
          echo "‚ùå Failed to push image. Checking permissions..."
          echo "Current authenticated account:"
          gcloud auth list --filter=status:ACTIVE --format="value(account)"
          echo "Project: $PROJECT_ID"
          echo "Required permissions:"
          echo "  - artifactregistry.repositories.uploadArtifacts"
          echo "  - artifactregistry.repositories.get"
          echo "Please ensure the service account has 'Artifact Registry Writer' role"
          exit 1
        fi
        
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend:latest

    - name: Deploy to Cloud Run
      run: |
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        REGION="${{ env.REGION }}"
        SERVICE_NAME="${{ env.SERVICE_NAME }}"
        IMAGE_TAG="${{ github.sha }}"
        
        echo "Deploying to Cloud Run..."
        echo "Service: $SERVICE_NAME"
        echo "Region: $REGION"
        echo "Image: $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend:$IMAGE_TAG"
        
        gcloud run deploy $SERVICE_NAME \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/finsolvz/backend:$IMAGE_TAG \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --port 8080 \
          --min-instances 0 \
          --max-instances 3 \
          --set-env-vars APP_ENV=production \
          --set-secrets MONGO_URI=MONGO_URI:latest,JWT_SECRET=JWT_SECRET:latest \
          --quiet

    - name: Show service URL
      run: |
        SERVICE_NAME="${{ env.SERVICE_NAME }}"
        REGION="${{ env.REGION }}"
        
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region $REGION \
          --format 'value(status.url)')
        
        echo "üöÄ Service deployed successfully!"
        echo "üìç Service URL: $SERVICE_URL"
        echo "üåç Region: $REGION"