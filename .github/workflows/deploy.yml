name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: finsolvz-backend
  REGION: asia-southeast2

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Check code formatting
      run: |
        unformatted=$(gofmt -l .)
        if [ -n "$unformatted" ]; then
          echo "❌ Code not formatted. Files:"
          echo "$unformatted"
          exit 1
        fi
        echo "✅ Code formatting OK"

    - name: Run linting
      run: |
        echo "🔍 Running Go vet..."
        go vet ./...
        echo "✅ Go vet passed"

    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        go test -v -timeout=120s -coverprofile=coverage.out ./internal/app/...
        echo "📊 Coverage report:"
        go tool cover -func=coverage.out | tail -5
      env:
        JWT_SECRET: test-jwt-secret-for-github-actions
        CGO_ENABLED: 0

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate secrets
      run: |
        if [ -z "${{ secrets.GCP_PROJECT_ID }}" ] || [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ Required secrets not set. Please configure GCP_PROJECT_ID and GCP_SA_KEY"
          exit 1
        fi
        echo "✅ Secrets validated"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure GCP and enable APIs
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud services enable artifactregistry.googleapis.com run.googleapis.com --quiet
        
    - name: Configure Docker authentication
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        
    - name: Setup Artifact Registry repository
      run: |
        gcloud artifacts repositories create finsolvz \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --description="Docker repository for Finsolvz Backend" \
          --quiet 2>/dev/null || true

    - name: Build and push Docker image
      run: |
        IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/finsolvz/backend:${{ github.sha }}"
        IMAGE_LATEST="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/finsolvz/backend:latest"
        
        docker build -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/finsolvz/backend:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --port 8080 \
          --min-instances 0 \
          --max-instances 3 \
          --set-env-vars APP_ENV=production \
          --set-secrets MONGO_URI=MONGO_URI:latest,JWT_SECRET=JWT_SECRET:latest \
          --quiet

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "🚀 Deployed: $SERVICE_URL"